传统双链表一个节点内储存三个数据,一个为该节点的值,另两个为指针,其中一个指向该节点的下一个节点(右侧),另一个指向该节点的上一个节点(左侧)



construct
  三个数组,一个储存当前节点的值,另两个储存索引(连接当前节点与上/下一个节点)
basic operators
  初始化
  插入 索引为k的节点之后(右侧)
  删除 索引为k的节点



construct explanation
通过三个数组模拟单链表
  e[] 模拟链表的值  ==> []为索引, e[]储存对象为 该节点的值
  l[] 模拟链表的指针  ==>
    []内为索引, l[]储存对象为 下一个节点的索引(右侧)
    方向为当前当前节点的下一个节点
  r[] 模拟链表的指针  ==>
    []内为索引, e[]储存对象为 上一个节点的索引(左侧)
    方向为当前当前节点的上一个节点
idx 为节点的索引,其值对应链表的节点的个数,也可以看作是第 idx + n  个节点(n为任意整数)
初始化: r[0] = 1, l[1] = 0; idx = 2; 


operator explanation
//初始化  0表示左端,1表示右端
void init(){
 r[0] = 1;
 l[1] = 0;
 idx = 2;//idx从2开始, 0和1的位置都已经存在
}
//将x插入到k节点的右边
void add(int k, int x){
 e[idx] = x;//存储结点
 l[idx] = k;//结点左指针指向k结点
 r[idx] = r[k];//结点右指针指向k结点的右一个结点
 l[r[k]] = idx; //k结点的右一个结点的左指针指向 idx
 r[k] = idx; //k结点的右指针指向idx
 idx++;
}
//将下标为k的节点删除
void remove(int k){
 r[l[k]] = r[k];
 l[r[k]] = l[k];
}
