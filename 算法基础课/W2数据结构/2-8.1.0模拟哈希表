作用: 将大范围数据映射到小范围数据内

当映射数据冲突时的解决方法:
  idea1:拉链法 - 用链表储存相同映射值的数据  ==>  数组外拓展
  construct1: 三个数组
    h[], 代表hash数组
    e[] 和 ne[] 代表链表
  idea1:开放寻址法 - 将数据放在冲突的数据的下一个位置  ==>  数组内拓展
  construct1: 一个数组
    h[], 代表hash数组
  
  
  
IMPLEMENTATION-拉链法
  h[]代表hash数组, e[] 和 ne[] 代表链表
    h[]中, []内为映射的值, h[]为索引
    e[]中, []内为索引, e[]为数的原值
    en[]中, []内为索引, ne[]为链表下一个结点的索引
    
  初始化
    h[]所有值初始化为 -1, 此时h[]为ne[]链表头结点的前一个位置, -1 代表该链表的末尾的后一个位置的索引. 详见链表中初始化 head = -1

  寻找
    每一个映射值通过h[]可以找到对应的链表, 且当前h[]的值为该对应链表的第一个结点, 查值得过程为依次遍历, 若到链表末尾(即-1), 则查询失败


IMPLEMENTATION-开放寻址法
  h[]代表hash数组
    h[]中, []内为索引(映射值 + n), h[]为数组得原值
    
  初始化以及查村  ==>  返回数应该储存得位置(索引)
    通过原值计算映射值
    若映射值所在得位置(索引)不存在对应的值,则返回该位置(索引)
    当映射值所在得位置(索引)存在对应的值, 则该映射值 + 1, 直至寻到不存在对应的值某位置(索引), 然后返回该位置(索引)
