传统链表一个节点内储存两个数据,一个为该节点的值,另一个为指针,指向该节点的下一个节点

construct
  两个数组,一个储存当前节点的值,一个储存索引(连接当前节点与下一个节点)
basic operators
  初始化
  插入 头结点之后
  插入 索引为k的节点之后
  删除 索引为k的节点


construct explanation
通过两个数组模拟单链表
  e[] 模拟链表的值  ==> []为索引, e[]储存对象为 该节点的值
  ne[] 模拟链表的指针  ==>
    []内为索引, ne[]储存对象为 节点的索引
    方向为当前当前节点的下一个节点
idx 为节点的索引,其值对应链表的节点的个数,也可以看作是第 idx + n  个节点(n为任意整数)
初始化: idx = 0; head = -1; 表示零个节点,head表示链表头, 含义和ne[]相同, 指向索引为-1的链表结尾


operator explanation
//初始化
void init(){
 head = -1;
 idx = 0;
}

//将x插到头结点后(即head之后)
void add_to_head(int x){
 e[idx] = x;//存储结点
 ne[idx] = head;//结点指针指向head后一个结点
 head = idx++;//更换head后一个结点为当前结点, 总节点数+1
}

//将x插到k结点的后面
void add(int k, int x){
 e[idx] = x;
 ne[idx] = ne[k];
 ne[k] = idx++;
}

//将下标为k的结点的后一个点删掉
void remove(int k){
 ne[k] = ne[ne[k]];//更换k结点的下一个结点为k的下一个的下一个结点
 
}
