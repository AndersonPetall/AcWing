假设n个数据构成h行的堆   n与h的关系为  2^h - 1 = n

初始化建堆（buildMaxHeap） 自顶向底

          当前行元素个数     元素总个数                                     向下调整的次数  
第 1 行       2^0 = 1         2^0 = 1                                             h - 1
第 2 行       2^1 = 2         2^0 + 2^1  = 3                                      h - 2
第 3 行       2^2 = 4         2^0 + 2^1 + 2^2 = 7                                 h - 3
第 4 行       2^3 = 8         2^0 + 2^1 + 2^2 + 2^3 = 15                          h - 4 
...
...
...
第 h-1行      2^(h - 2)       2^0 + 2^1 + 2^2 + ... + 2^(h-2)                     h - (h - 1) = 1 
第 h 行       2^(h - 1)       2^0 + 2^1 + 2^2 + ... + 2^(h-2) + 2^(h-1)           h - h = 0 

 Time = 每行元素 * 当前行元素的下调次数
      = 2^0*(h-1) + 2^1*(h-2) + 2^2*(h-3) + ... + 2^(h-2)*1 + 2^(h-1)*0
2Time =             2^1*(h-1) + 2^2*(h-2) + 2^3*(h-2) +   ...   + 2^(h-1)*1 + 2^h*0
 Time =-2^0*(h-1) + 2^1 + 2^2 + 2^3* +   ...   + 2^(h-1) + 2^h*0
      = -h + 1 + 2^1 + 2^2 + 2^3* +   ...   + 2^(h-1)
      = 2*(2^(h-1) - 1) - h + 1
      = 2^h - 1 - h
      = n -log2(n+1)  ==> O(n) = n



重建堆（maxHeapify，直译为大顶堆化） 自底向顶

          当前行元素个数     元素总个数                                     向下调整的次数  
第 1 行       2^0 = 1         2^0 = 1                                             0
第 2 行       2^1 = 2         2^0 + 2^1  = 3                                      1
第 3 行       2^2 = 4         2^0 + 2^1 + 2^2 = 7                                 2
第 4 行       2^3 = 8         2^0 + 2^1 + 2^2 + 2^3 = 15                          3 
...
...
...
第 h-1行      2^(h - 2)       2^0 + 2^1 + 2^2 + ... + 2^(h-2)                     h - 2
第 h 行       2^(h - 1)       2^0 + 2^1 + 2^2 + ... + 2^(h-2) + 2^(h-1)           h - 1

 Time = 每行元素 * 当前行元素的下调次数
      = 2^0*0 + 2^1*1 + 2^2*2 + ... + 2^(h-2)*(h-2) + 2^(h-1)*(h-1)
2Time =         2^1*0 + 2^2*1 + 2^3*(h-2) +   ...   + 2^(h-1)*(h-2) + 2^h*(h-1)
-Time = 2^0*0 + 2^1 + 2^2 + 2^3* +   ...   + 2^(h-2) + 2^(h-1) - 2^h(h-1)
      = 0 + 2^1 + 2^2 + 2^3* +   ...   + 2^(h-1) - 2^h(h-1)
      = 2*(2^(h-1) - 1) - 2^h(h-1)
      = 2^h - 2 - 2^h*h + 2^h
      = 2^h(2-h) - 2
 Time = 2^h(h-2) + 2
      = (n+1)(log2(n+1)-2) + 2  ==> O(n) = nlogn



从 n/2 开始向下排序  ==> 从最后一个分支结点(非叶子结点)开始排序
思路 :
  最后一行一共有 n/2 个元素, 其他行一共有 n/2 个元素
    ==> 第 h   行(倒数第一行) n/2 个元素   最多向下 0 次
    ==> 第 h-1 行(倒数第二行) n/4 个元素   最多向下 1 次   
    ==> 第 h-2 行(倒数第三行) n/8 个元素   最多向下 2 次   
 Time = n/4 * 1 + n/8 * 2 + n/16 * 3 + ....
      = n(1*2^(-2) + 2*2^(-3) + 3*w^(-4).....)
2Time = n(1*2^(-1) + 2*2^(-2) + 3*w^(-3).....)
 Time = n(2^(-1) + 2^(-2) + 2^(-3) + 2^(-4) + ....) < n * 1
