树与图
  树是特殊的图  ==>  无环连通图
  
  有向图与无向图  ==> 无向图是特殊的有向图
    有向图  a => b
    无向图  a => b, b => a  


有向图的构造
  邻接矩阵
    g[a, b]  若有权重,储存权重;若无权重,储存Boolean(0/1)
  
  邻接表  ==>  单链表
    特点:
      每个结点均有一个单链表  <==>  hash中的拉链法
      单链表中的顺序不重要, 主要用于储存当前结点可以通向哪些点
        不重要的原因: 题干输入的不是有序序列
        防止重复使用的方式: 声明数组表明该结点是否被使用
       



构成 
树与图的dfs模板
// 需要标记数组st[N],  遍历节点的每个相邻的结点
void dfs(int u) {
    st[u] = true; // 标记一下，记录为已经被搜索过了，下面进行搜索过程
    for (int i = h[u]; i != -1; i = ne[i]) {
        int j = e[i];
        if (!st[j]) {
            dfs(j);
        }
    }
}
树与图的bfs模板
// 需要标记数组st[N],  遍历节点的每个相邻的结点
void bfs(int u) {
    queue<int> q; q.push(firstNote);
    while(q.size()){
      int t = q.front(); q.pop();
      for (int i = h[u]; i != -1; i = ne[i]) {
        int j = e[i];
        if (!st[j]) { 
          q.push(j);
        }
      }
    }
}

        
